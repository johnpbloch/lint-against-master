#!/usr/bin/env php
<?php

use League\CLImate\CLImate;
use JPB\Lint\File;
use PHP_CodeSniffer\{Config, Reporter, Ruleset, Files};

if ( file_exists( __DIR__ . '/../vendor/autoload.php' ) ) {
	require_once __DIR__ . '/../vendor/autoload.php';
} elseif ( file_exists( __DIR__ . '/../../../vendor/autoload.php' ) ) {
	require_once __DIR__ . '/../../../vendor/autoload.php';
}

function lines_to_array( ?string $lines, bool $filter = true ): array {
	$lines = explode( "\n", $lines ?? '' );
	$lines = array_map( 'trim', $lines );
	if ( $filter ) {
		$lines = array_filter( $lines );
	}

	return $lines;
}

function get_lines_changed_in_file( $file ): array {
	$type = get_type();
	switch ( $type ) {
		case 'master':
			$arg = 'master HEAD';
			break;
		case 'staged':
			$arg = '--staged';
			break;
		default:
			throw new LogicException( 'Please do not bathe the gremlins' );
	}
	$file  = escapeshellarg( $file );
	$lines = lines_to_array( `git diff --unified=0 $arg $file | grep -Po '^@@ -[0-9]+(,[0-9]+)? \+\K[0-9]+(,[0-9]+)?(?= @@)'` );
	$lines = array_map( fn( $l ) => explode( ',', $l ) + [ 0, 1 ], $lines );
	$lines = array_map( fn( $l ) => array_keys( array_fill( $l[0], $l[1], '' ) ), $lines );

	return array_merge( ...$lines );
}

function get_phpcs_bin(): string {
	if ( $_ENV['PHPCS'] ?? false ) {
		return (string) $_ENV['PHPCS'];
	}
	if ( file_exists( 'vendor/bin/phpcs' ) ) {
		return 'vendor/bin/phpcs';
	}

	return 'phpcs';
}

function run_phpcs( array $files, array $args = [] ) {
	$files = array_map( fn( $file ) => escapeshellarg( trim( $file ) ), $files );
	$files = implode( ' ', $files );
	$args  = array_map( fn( $arg ) => escapeshellarg( trim( $arg ) ), $args );
	$args  = array_filter( $args, fn( $arg ) => substr( $arg, 0, 9 ) !== '--report=' );
	$args  = implode( ' ', $args );
	$phpcs = get_phpcs_bin();

	return json_decode( `$phpcs --report=json $args $files`, true );
}

function fix_report( array $report, array $lines_changed ) {
	$total_errors = $total_warnings = $total_fixable = 0;
	$new_report   = [ 'files' => [] ];
	foreach ( $report['files'] as $file => $file_report ) {
		$errors     = $warnings = $fixable = 0;
		$messages   = [];
		$file_lines = $lines_changed[ $file ] ?? [];
		foreach ( $file_report['messages'] ?? [] as $message ) {
			if ( array_search( $message['line'] ?? 0, $file_lines, true ) === false ) {
				continue;
			}
			$messages[] = $message;
			if ( $message['fixable'] ?? false ) {
				$fixable ++;
			}
			if ( strtolower( $message['type'] ) === 'warning' ) {
				$warnings ++;
			} else {
				$errors ++;
			}
		}
		if ( ! $messages ) {
			continue;
		}
		$new_report['files'][ $file ] = compact( 'errors', 'warnings', 'messages' );
		$total_errors                 += $errors;
		$total_warnings               += $warnings;
		$total_fixable                += $fixable;
	}
	$new_report['totals'] = [
		'errors'   => $total_errors,
		'warnings' => $total_warnings,
		'fixable'  => $total_fixable,
	];

	return $new_report;
}

function climate(): CLImate {
	static $climate;
	if ( ! $climate ) {
		$climate = new CLImate;
		$climate->arguments->add( [
			'type' => [
				'prefix'       => 't',
				'longPrefix'   => 'type',
				'description'  => 'Type of check to perform. Can be "master" to check the current HEAD against master or "staged" to check staged changes. Staged will fail if there are unstaged changes on tracked files.',
				'defaultValue' => 'master',
			],
		] );
		$climate->arguments->parse();
	}

	return $climate;
}

function get_type(): string {
	$type = strtolower( climate()->arguments->get( 'type' ) );
	if ( ! in_array( $type, [ 'master', 'staged' ] ) ) {
		throw new InvalidArgumentException( sprintf( 'Invalid type value: %s', $type ), 1 );
	}
	if ( $type === 'staged' && lines_to_array( `git diff --name-status | grep '^M'` ) ) {
		end_with_error( <<<ERR
			Unstaged changes detected in the working tree!
			Please stage all modifications or stash unstaged changes. Untracked and deleted files will not trigger this error.
			ERR, 2 );
	}

	return $type;
}

function get_changed_files(): array {
	$type = get_type();
	switch ( $type ) {
		case 'master':
			$arg = 'master HEAD';
			break;
		case 'staged':
			$arg = '--staged';
			break;
		default:
			throw new LogicException( 'No feeding the gremlins after midnight' );
	}
	$renames = lines_to_array( `git diff --name-status $arg | grep '^R' | awk '{print $3}'` );
	$changed = lines_to_array( `git diff --name-status $arg | grep -Pv '^[RD]' | awk '{print $2}'` );

	return [ ...$renames, ...$changed ];
}

function end_with_error( string $message, ?int $code, ?Throwable $exception = null ) {
	climate()->error( $message );
	if ( $exception ) {
		climate()->error( $exception->getMessage() );
		$code = $exception->getCode();
	}
	exit( min( max( 1, $code ), 255 ) );
}

function phpcs_config(): Config {
	static $config;
	if ( ! $config ) {
		$config = new Config( climate()->arguments->trailingArray() ?? [], false );
	}

	return $config;
}

function phpcs_ruleset(): Ruleset {
	static $ruleset;
	if ( ! $ruleset ) {
		$ruleset = new Ruleset( phpcs_config() );
	}

	return $ruleset;
}

function phpcs_file( string $file_path ): File {
	return new File( $file_path, phpcs_ruleset(), phpcs_config() );
}

( function () {
	try {
		$s                 = DIRECTORY_SEPARATOR;
		$cwd               = rtrim( getcwd(), $s );
		$files_changed     = array_map( fn( $f ) => $cwd . $s . ltrim( $f, $s ), get_changed_files() );
		$all_changed_lines = array_combine( $files_changed, array_map( fn( $file ) => get_lines_changed_in_file( $file ), $files_changed ) );
		$report            = run_phpcs( $files_changed, climate()->arguments->trailingArray() ?? [] );
		$fixed_report      = fix_report( $report, $all_changed_lines );
		$errors            = (int) ( $fixed_report['totals']['errors'] ?? 0 );
		$warnings          = (int) ( $fixed_report['totals']['warnings'] ?? 0 );
		if ( ( $errors + $warnings ) === 0 ) {
			exit( 0 );
		}
		$fixable = (int) ( $fixed_report['totals']['fixable'] ?? 0 );
		climate()->error( sprintf( 'phpcs found %d errors and %d warnings in your changes from master. %d can be fixed automatically with phpcbf.', $errors, $warnings, $fixable ) );
		$reporter = new Reporter( phpcs_config() );
		foreach ( $fixed_report['files'] ?? [] as $path => $file_report ) {
			$phpcs_file = phpcs_file( $path );
			foreach ( $file_report['messages'] ?? [] as $message ) {
				$phpcs_file->addRawMessage(
					strtolower( $message['type'] ?? '' ) === 'error',
					$message['message'] ?? '',
					$message['line'] ?? 1,
					$message['column'] ?? 1,
					$message['source'] ?? 'Internal.Unknown',
					[],
					$message['severity'] ?? 5,
					(bool) ( $message['fixable'] ?? false )
				);
			}
			/** @var Files\File $phpcs_file */
			$reporter->cacheFileReport( $phpcs_file );
		}
		$reporter->printReports();
	} catch ( Throwable $e ) {
		end_with_error( 'An unexpected error occurred:', null, $e );
	}
} )();
